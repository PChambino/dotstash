call plug#begin()
if !has('nvim')
  Plug 'tpope/vim-sensible'
  Plug 'tmux-plugins/vim-tmux-focus-events' " makes autoread work
endif
Plug 'tpope/vim-sleuth' " heuristically detected indent
Plug 'tpope/vim-rsi' " readline/emacs style insertion
Plug 'tpope/vim-eunuch' " UNIX helpers :Mkdir :Rename
Plug 'tpope/vim-unimpaired' " ]b [b
Plug 'tpope/vim-commentary' " gc gcc
Plug 'tpope/vim-surround' " ys cs ds S
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-endwise' " auto close statements
Plug 'tpope/vim-fugitive' " git helpers
Plug 'tommcdo/vim-lion' " alignment gl gL
Plug 'AndrewRadev/splitjoin.vim' " gS gJ

Plug 'sickill/vim-monokai'
Plug 'bling/vim-airline'
" Plug 'tpope/vim-flagship'
" Plug 'itchyny/lightline.vim'
Plug 'airblade/vim-gitgutter'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'shougo/vimfiler.vim' " requires unite
Plug 'shougo/unite.vim' " requires vimproc for file_rec/git
Plug 'shougo/vimproc.vim', { 'do': 'make' }
" Plug 'shougo/denite.nvim' " replaces unite, wait for it to mature
Plug 'roxma/vim-tmux-clipboard'

Plug 'scrooloose/syntastic'
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }
Plug 'derekwyatt/vim-sbt', { 'for': 'sbt.scala' }
Plug 'saltstack/salt-vim', { 'for': 'sls' }
" Plug 'mustache/vim-mustache-handlebars'
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
" Plug 'rust-lang/rust.vim'
Plug 'ElmCast/elm-vim', { 'for': 'elm' }
Plug 'venantius/vim-cljfmt', { 'for': 'clojure' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'tpope/vim-salve', { 'for': 'clojure' }
Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
Plug 'dag/vim-fish', { 'for': 'fish' }
call plug#end()

colorscheme monokai

if has("mouse") | set mouse=a | endif

set autowrite " write when switching buffers
set colorcolumn=80
set cursorline
set foldlevelstart=99 " open folds by default
set foldmethod=syntax
set hlsearch
set ignorecase smartcase " case-sensitive if search has upper-case characters
set lazyredraw
set list listchars=tab:▸\ ,trail:·,nbsp:␣,extends:>,precedes:< showbreak=↪ 
set nobackup
set noswapfile
set splitbelow
set splitright
set tags=.tags " use hidden tags file
set undofile undodir=/tmp " persist undo history
set visualbell

noremap <leader>R :source $MYVIMRC<cr>
noremap <leader>E :tabedit $MYVIMRC<cr>
noremap <F6> :set invspell<cr>
noremap <c-l> :noh<cr>

inoremap <c-s> <esc>:w<cr>
noremap <c-s> <esc>:w<cr>

map <space> <leader>
map <space><space> <leader><leader>

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_selecta'])
nnoremap <leader><leader> :Unite -start-insert file_rec/git:--cached:--others:--exclude-standard<cr>
nnoremap <leader>b :Unite -start-insert buffer<cr>
nnoremap <leader>g :Unite grep:.::
nnoremap <leader>gg :Unite grep:.::<c-r><c-w><cr>
let g:unite_source_grep_command = 'rg'
let g:unite_source_grep_recursive_opt = ''

let g:airline#extensions#tabline#enabled = 1

let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
au VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=NONE
au VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=0

let g:vimfiler_as_default_explorer = 1
autocmd FileType vimfiler nmap <buffer> \ <leader>
