call plug#begin()
if !has('nvim')
  Plug 'tpope/vim-sensible'
  Plug 'tmux-plugins/vim-tmux-focus-events' " makes autoread work
endif
Plug 'tpope/vim-vinegar' " better netrw
Plug 'tpope/vim-sleuth' " heuristically detected indent
Plug 'tpope/vim-rsi' " readline/emacs style insertion
Plug 'tpope/vim-eunuch' " UNIX helpers :Mkdir :Rename
Plug 'tpope/vim-unimpaired' " ]b [b
Plug 'tpope/vim-commentary' " gc gcc
Plug 'tpope/vim-surround' " ys cs ds S
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-endwise' " auto close statements
Plug 'tpope/vim-fugitive' " git helpers
Plug 'tpope/vim-rhubarb' " github helpers
Plug 'tpope/vim-dispatch' " :Make :Dispatch :Start :Focus
Plug 'tommcdo/vim-lion' " alignment gl gL
Plug 'AndrewRadev/splitjoin.vim' " gS gJ

Plug 'sickill/vim-monokai'
Plug 'bling/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'roxma/vim-tmux-clipboard'
Plug 'benmills/vimux'

Plug 'dense-analysis/ale'
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
Plug 'ElmCast/elm-vim', { 'for': 'elm' }
Plug 'venantius/vim-cljfmt', { 'for': 'clojure' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'dag/vim-fish', { 'for': 'fish' }
call plug#end()

colorscheme monokai

if has("mouse") | set mouse=a | endif

set autowrite " write when switching buffers
set colorcolumn=80,120
set cursorline
set foldlevelstart=99 " open folds by default
set foldmethod=syntax
set hlsearch
set ignorecase smartcase " case-sensitive if search has upper-case characters
set lazyredraw
set list listchars=tab:▸\ ,trail:·,nbsp:␣,extends:>,precedes:< showbreak=↪ 
set nobackup
set noswapfile
set shada="NONE"
set splitbelow
set splitright
set tags=.tags " use hidden tags file
set undofile undodir=/tmp " persist undo history
set visualbell

noremap <leader>R :source $MYVIMRC<cr>
noremap <leader>E :tabedit $MYVIMRC<cr>
noremap <F6> :set invspell<cr>
noremap <c-l> :noh<cr>
map <leader>- -:bd#<cr>

inoremap <c-s> <esc>:w<cr>
noremap <c-s> <esc>:w<cr>
inoremap <c-x> <esc>:bd<cr>
noremap <c-x> <esc>:bd<cr>

nnoremap g<space> :G 
nnoremap gs :G<cr>
nnoremap gb :G blame<cr>
nnoremap gh :Gbrowse<cr>

map <space> <leader>
map <space><space> <leader><leader>

nnoremap <leader><leader> :GFiles<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>g :Ag 
nnoremap <leader>8 :Ag <c-r><c-w><cr>
vnoremap <leader>8 y:Ag <c-r>"<cr>
nnoremap <leader>d :Files <C-R>=expand('%:h')<CR><CR>
nnoremap <leader>c :call RunCommandWithFile()<cr>

function! RunCommandWithFile()
  call inputsave()
  let cmd = input('Command? ')
  call inputrestore()

  call VimuxRunCommand(cmd . " " . bufname("%"))
endfunction

let g:airline#extensions#tabline#enabled = 1

let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
au VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=NONE
au VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=0

let g:ale_linters_explicit = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_fix_on_save = 1
